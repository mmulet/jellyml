{
  "version": 3,
  "sources": ["../../client/src/DonutState.ts", "../../client/src/draw_donut.ts", "../../client/src/makeAnimationCanvas.ts", "../../client/src/deleteTouch.ts", "../../client/src/setupTouch.ts", "../../client/src/setupMouseAndTouchListeners.ts", "../../client/src/handle_collisions.ts", "../../client/src/DonutMaker.ts", "../../client/src/JellySprite.ts", "../../client/src/find_next_donut.ts", "../../client/src/animate_tentacles_grabbed_donut.ts", "../../client/src/draw_tentacle_donut.ts", "../../client/src/Tentacle.ts", "../../client/src/load_image.ts", "../../client/src/UFO.ts", "../../client/src/Controller.ts", "../../client/src/index.ts"],
  "sourcesContent": ["export type Eaten = 0;\nexport type Not_Eaten = 1;\n\nexport const eaten: Eaten = 0;\nexport const not_eaten: Not_Eaten = 1;\n\nexport type EatenState = Eaten | Not_Eaten;\n\nexport interface DonutState {\n  top: EatenState;\n  right: EatenState;\n  left: EatenState;\n  bottom: EatenState;\n}\n/**\n * position is in binary\n * top right left bottom\n * in that order, top is most significant\n * bottom is least significant\n * 1111 is not eaten\n * 0000 is eaten\n *\n */\nexport const state_to_position = (state: DonutState) => {\n  const item =\n    (state.top * 8 + state.right * 4 + state.left * 2 + state.bottom);\n  return {\n    x: (item % 8) * 32,\n    y: Math.floor(item / 8) * 32,\n  };\n};\n", "import { Donut } from \"./Donut\";\nimport { state_to_position } from \"./DonutState\";\nexport const draw_donut = (\n  ctx: CanvasRenderingContext2D,\n  atlas: HTMLImageElement,\n  donut: Donut\n) => {\n  const { x, y } = state_to_position(donut.state);\n  ctx.drawImage(atlas, x, y, 32, 32, donut.x, donut.y, 32, 32);\n};\n", "export const animationCanvasId = \"animation-canvas\";\n\nexport const makeAnimationCanvas = (width: number, height: number, ratio: number) => {\n  {\n    const canvas = document.getElementById(\n      animationCanvasId\n    ) as HTMLCanvasElement;\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      if (!context) {\n        return null;\n      }\n      return {\n        canvas,\n        context,\n      };\n    }\n  }\n  const canvas = makeAnimationCanvasElement(width, height, ratio);\n  document.body.appendChild(canvas);\n\n  const context = canvas.getContext(\"2d\");\n  if (!context) {\n    return null;\n  }\n  context?.scale(ratio, ratio);\n  return {\n    canvas,\n    context,\n  };\n};\n\nexport const makeAnimationCanvasElement = (\n  width: number,\n  height: number,\n  ratio: number\n) => {\n  const canvas = document.createElement(\"canvas\");\n  canvas.id = animationCanvasId;\n  canvas.width = width * ratio;\n  canvas.height = height * ratio;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n  canvas.style.top = \"0\";\n  canvas.style.left = \"0\";\n  canvas.style.position = \"fixed\";\n  canvas.style.pointerEvents = \"none\";\n  return canvas;\n};\n", "import { Touches } from \"./Touches\";\n\nexport const deleteTouch = (\n  touches: Touches,\n  { changedTouches }: TouchEvent\n) => {\n  for (const { identifier } of changedTouches) {\n    touches.delete(identifier);\n  }\n};\n", "import { MouseOrTouchInput } from \"./MouseOrTouchInput\";\n\nexport const setupTouch = ({\n  clientX,\n  clientY,\n  input: maybeInput,\n  affected_a_donut,\n}: {\n  readonly clientX: number;\n  readonly clientY: number;\n  readonly input?: MouseOrTouchInput;\n  readonly affected_a_donut: boolean;\n}) => {\n  const touchWidth = 20;\n  const input = maybeInput ?? {\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    clientX: 0,\n    clientY: 0,\n    difference: null,\n    frameValid: false,\n    affected_a_donut,\n  };\n  if (input) {\n    input.difference = {\n      x: clientX - input.clientX,\n      y: clientY - input.clientY,\n    };\n  }\n  input.clientX = clientX;\n  input.clientY = clientY;\n  input.left = clientX - touchWidth;\n  input.right = clientX + touchWidth;\n  input.top = clientY - touchWidth;\n  input.bottom = clientY + touchWidth;\n  return input;\n};\n", "import { deleteTouch } from \"./deleteTouch\";\nimport { MouseOrTouchInput } from \"./MouseOrTouchInput\";\nimport { setupTouch } from \"./setupTouch\";\nimport { Touches } from \"./Touches\";\n\nexport const setupMouseAndTouchListeners = ({\n  touches,\n  get_mouse,\n  set_mouse,\n}: {\n  readonly touches: Touches;\n  readonly get_mouse: () => MouseOrTouchInput | null;\n  readonly set_mouse: (mouse: MouseOrTouchInput | null) => void;\n}) => {\n  window.addEventListener(\n    \"touchstart\",\n    (input: TouchEvent) => {\n      const { changedTouches } = input;\n      for (const { identifier, clientX, clientY } of changedTouches) {\n        touches.set(\n          identifier,\n          setupTouch({\n            clientX,\n            clientY,\n            affected_a_donut: false,\n          })\n        );\n      }\n      input.preventDefault();\n    },\n    false\n  );\n  window.addEventListener(\n    \"touchmove\",\n    ({ changedTouches }: TouchEvent) => {\n      for (const { identifier, clientX, clientY } of changedTouches) {\n        const touchInfo = touches.get(identifier);\n        if (!touchInfo) {\n          continue;\n        }\n        touches.set(\n          identifier,\n          setupTouch({\n            clientX,\n            clientY,\n            input: touchInfo,\n            affected_a_donut: false,\n          })\n        );\n      }\n    },\n    false\n  );\n\n  window.addEventListener(\"touchcancel\", (a) => deleteTouch(touches, a), false);\n  let last_touch_end_time = 0;\n  window.addEventListener(\"touchend\", (a) => {\n    deleteTouch(touches, a), false;\n    /**\n     * disable double tap to zoom\n     * Still leave in pinch to zoom\n     * so the user can still zoom,\n     * just don't want the user to\n     * accidentally zoom in when\n     * tapping the donut\n     */\n    const now = new Date().getTime();\n    if (now - last_touch_end_time <= 500) {\n      a.preventDefault();\n    }\n    last_touch_end_time = now;\n  });\n\n  window.addEventListener(\n    \"mouseenter\",\n    ({ clientX, clientY }: MouseEvent) => {\n      set_mouse(\n        setupTouch({\n          clientX,\n          clientY,\n          affected_a_donut: true,\n        })\n      );\n    },\n    false\n  );\n\n  window.addEventListener(\n    \"mousemove\",\n    ({ clientX, clientY }: MouseEvent) => {\n      set_mouse(\n        setupTouch({\n          clientX,\n          clientY,\n          input: get_mouse() ?? undefined,\n          affected_a_donut: true,\n        })\n      );\n    },\n    false\n  );\n  window.addEventListener(\"mousedown\", ({ clientX, clientY }: MouseEvent) => {\n    const mouse = get_mouse();\n    if (mouse == null) {\n      return;\n    }\n    mouse.affected_a_donut = false;\n    set_mouse(mouse);\n  });\n  window.addEventListener(\"mouseup\", ({ clientX, clientY }: MouseEvent) => {\n    const mouse = get_mouse();\n    if (mouse == null) {\n      return;\n    }\n    mouse.affected_a_donut = true;\n    set_mouse(mouse);\n  });\n\n  window.addEventListener(\n    \"mouseenter\",\n    ({ clientX, clientY }: MouseEvent) => {\n      set_mouse(\n        setupTouch({\n          clientX,\n          clientY,\n          affected_a_donut: true,\n        })\n      );\n    },\n    false\n  );\n  window.addEventListener(\"mouseleave\", () => {\n    set_mouse(null);\n  });\n};\n", "import { Donut } from \"./Donut\";\nimport { DonutState, eaten } from \"./DonutState\";\nimport { JellySprite } from \"./JellySprite\";\nimport { MouseOrTouchInput } from \"./MouseOrTouchInput\";\nimport { Touches } from \"./Touches\";\n\nexport interface HasInputAndDonuts {\n  mouse: MouseOrTouchInput | null;\n  touches: Touches;\n  donuts: Donut[];\n  main_position: {\n    left: number;\n    right: number;\n    top: number;\n  };\n  jelly_sprites: JellySprite[];\n}\n\n/**\n * Already assumes that the point\n * is inside the donut.\n */\nconst get_eaten_parts = (\n  donut: Donut,\n  x: number,\n  y: number\n): keyof DonutState => {\n  const x_relative_to_donut = x - (donut.x + 16);\n  const y_relative_to_donut = y - (donut.y + 16);\n\n  if (y_relative_to_donut >= 0) {\n    if (x_relative_to_donut > y_relative_to_donut) {\n      return \"right\";\n    }\n    if (x_relative_to_donut >= -y_relative_to_donut) {\n      return \"bottom\";\n    }\n    return \"left\";\n  }\n  if (x_relative_to_donut < y_relative_to_donut) {\n    return \"left\";\n  }\n  if (x_relative_to_donut <= -y_relative_to_donut) {\n    return \"top\";\n  }\n  return \"right\";\n};\n\nexport const handle_collisions = ({\n  mouse: in_mouse,\n  touches: in_touches,\n  donuts,\n  main_position,\n  jelly_sprites,\n}: HasInputAndDonuts) => {\n  const un_translated_inputs: MouseOrTouchInput[] = [];\n  if (in_mouse != null && !in_mouse.affected_a_donut) {\n    un_translated_inputs.push(in_mouse);\n  }\n  for (const [, touch] of in_touches) {\n    if (touch.affected_a_donut) {\n      continue;\n    }\n    un_translated_inputs.push(touch);\n  }\n  if (un_translated_inputs.length <= 0) {\n    return;\n  }\n\n  const inputs: {\n    left_x: number;\n    left_y: number;\n    right_x: number;\n    right_y: number;\n  }[] = [];\n  for (const input of un_translated_inputs) {\n    inputs.push({\n      left_x: input.clientX - main_position.left,\n      left_y: input.clientY - main_position.top,\n      right_x: input.clientX - main_position.right,\n      right_y: input.clientY - main_position.top,\n    });\n  }\n  const indices_to_remove: number[] = [];\n  for (let i = 0; i < donuts.length; i++) {\n    const donut = donuts[i];\n    for (let input_i = 0; input_i < inputs.length; input_i++) {\n      const input = inputs[input_i];\n      const x = donut.left ? input.left_x : input.right_x;\n      const y = donut.left ? input.left_y : input.right_y;\n      if (\n        !(x > donut.x && x < donut.x + 32 && y > donut.y && y < donut.y + 32)\n      ) {\n        continue;\n      }\n      const part = get_eaten_parts(donut, x, y);\n      if (donut.state[part] == eaten) {\n        /**\n         * Already ate this part, so it's not a match\n         */\n        continue;\n      }\n\n      jelly_sprites.push({\n        x: x - 32,\n        y: y - 32,\n        age: 0,\n        vertical: part == \"left\" || part == \"right\" ? true : false,\n        left: donut.left,\n      });\n      if (jelly_sprites.length > 500) {\n        jelly_sprites.shift();\n      }\n\n      donut.state[part] = eaten;\n      un_translated_inputs[input_i].affected_a_donut = true;\n      if (\n        donut.state.left == eaten &&\n        donut.state.right == eaten &&\n        donut.state.top == eaten &&\n        donut.state.bottom == eaten\n      ) {\n        indices_to_remove.push(i);\n      }\n      break;\n    }\n  }\n  indices_to_remove.sort();\n  for (let i = indices_to_remove.length - 1; i >= 0; i--) {\n    donuts.splice(indices_to_remove[i], 1);\n  }\n};\n", "export interface DonutMaker {\n  x: number;\n  y: number;\n  left: boolean;\n  time: number;\n  state: \"open\" | \"close\" | \"idle\";\n  just_opened: boolean;\n}\n\nexport const update_donut_makers = (\n  donut_makers: DonutMaker[],\n  timeDifference: number,\n  on_open: (donutMaker: DonutMaker) => void\n) => {\n  for (const donutMaker of donut_makers) {\n    switch (donutMaker.state) {\n      case \"idle\":\n        continue;\n      case \"open\":\n        donutMaker.time += timeDifference;\n        if (!donutMaker.just_opened && donutMaker.time * 15 > 7) {\n          donutMaker.just_opened = true;\n          on_open(donutMaker);\n        }\n        if (donutMaker.time * 15 > 15) {\n          donutMaker.state = \"close\";\n          donutMaker.just_opened = false;\n        }\n        continue;\n      case \"close\":\n        donutMaker.time -= timeDifference;\n        if (donutMaker.time < 0) {\n          donutMaker.time = 0;\n          donutMaker.state = \"open\";\n        }\n        continue;\n    }\n  }\n};\n\nexport const draw_donut_maker = (\n  ctx: CanvasRenderingContext2D,\n  sprites: HTMLImageElement,\n  donutMaker: DonutMaker\n) => {\n  /**\n   * 15 fps\n   */\n  const frame = Math.max(Math.min(15, Math.floor(donutMaker.time * 15)), 0);\n  const sx = 256 + (frame % 8) * 32;\n  const sy = Math.floor(frame / 8) * 64;\n\n  ctx.drawImage(sprites, sx, sy, 32, 64, donutMaker.x, donutMaker.y, 32, 64);\n};\n", "export interface JellySprite {\n  x: number;\n  y: number;\n\n  age: number;\n  vertical: boolean;\n  left: boolean;\n}\n\nexport const update_jelly_sprites = (\n  sprites: JellySprite[],\n  timeIncrement: number\n) => {\n  let indices_to_remove: number[] = [];\n  for (let i = 0; i < sprites.length; i++) {\n    const jelly = sprites[i];\n\n    jelly.age += timeIncrement;\n  }\n  /**\n   * remove backwards so that the indices don't change\n   */\n  for (let i = indices_to_remove.length - 1; i >= 0; i--) {\n    sprites.splice(indices_to_remove[i], 1);\n    console.log(\"removing\");\n  }\n};\n\n/**\n * Some weird variable frame rate stuff because\n * I don't like how it looks when it's constant\n */\nexport const draw_jelly_sprite = (\n  ctx: CanvasRenderingContext2D,\n  sprites: HTMLImageElement,\n  jelly: JellySprite\n) => {\n  if (jelly.vertical) {\n    let frame = Math.min(3, Math.floor(jelly.age * 15));\n    const sx = (frame % 4) * 64;\n    const sy = 64 + Math.floor(frame / 4) * 64;\n    ctx.drawImage(sprites, sx, sy, 64, 64, jelly.x, jelly.y, 64, 64);\n    return;\n  }\n  /**\n   * 15 fps\n   */\n  let frame = Math.min(3, Math.floor(jelly.age * 15));\n  const sx = 256 + (frame % 4) * 64;\n  const sy = 128 + Math.floor(frame / 4) * 64;\n\n  ctx.drawImage(sprites, sx, sy, 64, 64, jelly.x, jelly.y, 64, 64);\n};\n", "import { Donut } from \"./Donut\";\nimport { eaten } from \"./DonutState\";\nimport { RectPosition } from \"./RectPosition\";\n\nexport interface Donut_Holder {\n  donut: Donut | null;\n  x: number;\n  y: number;\n  left: boolean;\n}\n\nexport interface Input {\n  donut_holder: Donut_Holder;\n  main_position: RectPosition;\n  donuts: Donut[];\n  time_threshold: number;\n  animation_length: number;\n  pure_only: boolean;\n}\n\n/**\n *\n\n * @returns False on success, true on failure\n */\nexport const find_next_donut = ({\n  donut_holder,\n  main_position,\n  donuts,\n  time_threshold,\n  animation_length,\n  pure_only,\n}: Input) => {\n  let lowest_possible_donut_index = -1;\n\n  for (let index = 0; index < donuts.length; index++) {\n    const donut = donuts[index];\n    if (donut.left !== donut_holder.left) {\n      continue;\n    }\n\n    const y_in_absolute_coords = donut.y + main_position.top;\n\n    if (y_in_absolute_coords > donut_holder.y) {\n      /**\n       * This donut is below the tentacle\n       */\n      continue;\n    }\n\n    const distance_in_a_second = donut.vy * animation_length;\n\n    const y_in_a_second = y_in_absolute_coords + distance_in_a_second;\n    if (y_in_a_second > donut_holder.y) {\n      /**\n       * This donut will be below the tentacle\n       */\n      continue;\n    }\n\n    if (y_in_absolute_coords < donut_holder.y - donut.vy * time_threshold) {\n      /**\n       * Too far, wait for it to get closer\n       */\n      continue;\n    }\n\n    if (\n      pure_only &&\n      (donut.state.bottom == eaten ||\n        donut.state.left == eaten ||\n        donut.state.right == eaten ||\n        donut.state.top == eaten)\n    ) {\n      continue;\n    }\n\n    if (lowest_possible_donut_index == -1) {\n      lowest_possible_donut_index = index;\n      continue;\n    }\n\n    const lowest_donut = donuts[lowest_possible_donut_index];\n    if (donut.y >= lowest_donut.y) {\n      lowest_possible_donut_index = index;\n    }\n  }\n  if (lowest_possible_donut_index == -1) {\n    return true;\n  }\n\n  const index = lowest_possible_donut_index;\n  const donut = donuts[index];\n\n  const y_in_absolute_coords = donut.y + main_position.top;\n  const x_in_absolute_coords =\n    donut.x + (donut.left ? main_position.left : main_position.right);\n\n  donut.x = x_in_absolute_coords - donut_holder.x;\n  donut.y = y_in_absolute_coords - donut_holder.y;\n  donut_holder.donut = donut;\n\n  donuts.splice(index, 1);\n\n  return false;\n};\n", "import { Tentacle } from \"./Tentacle\";\n\nconst frame_positions = {\n  72: { x: -1.7321655273437493, y: 9.48956179151348 },\n  73: { x: -1.7321655273437493, y: 9.48956179151348 },\n  74: { x: -1.7321655273437493, y: 9.48956179151348 },\n  75: { x: -1.7321655273437493, y: 9.48956179151348 },\n  76: { x: -1.4107849121093743, y: 10.11971986060049 },\n  77: { x: -0.1252593994140625, y: 12.797894646139707 },\n  78: { x: 2.4457885742187493, y: 16.263770009957113 },\n  79: { x: 6.141671752929689, y: 20.98996151194853 },\n  80: { x: 11.926531982421874, y: 26.188774557674634 },\n  81: { x: 19.478988647460938, y: 31.07250856885723 },\n  82: { x: 29.441802978515625, y: 35.641163545496326 },\n  83: { x: 40.20807113647461, y: 38.319338331035546 },\n  84: { x: 52.58124618530273, y: 38.949496400122555 },\n  85: { x: 64.63303833007812, y: 37.37410122740503 },\n  86: { x: 76.52413940429688, y: 33.278067794500615 },\n  87: { x: 86.0048828125, y: 26.50385957605699 },\n  88: { x: 93.39664916992187, y: 19.572111840341606 },\n  89: { x: 98.37805786132813, y: 12.010203043619793 },\n  90: { x: 100.46703491210937, y: 6.181231928806682 },\n  91: { x: 100.78841552734374, y: 2.872897578220744 },\n  92: { x: 99.34219970703126, y: 1.9276589786305145 },\n  93: { x: 96.28907775878906, y: 3.660596660539216 },\n  94: { x: 92.7538848876953, y: 7.441551058900124 },\n  95: { x: 87.45109558105469, y: 12.482821595435052 },\n  96: { x: 80.22001953125, y: 18.154253192976412 },\n  97: { x: 72.34618225097657, y: 22.722905177696084 },\n  98: { x: 62.704748535156256, y: 26.66139909332874 },\n  99: { x: 53.545385742187506, y: 29.02449484432445 },\n  100: { x: 43.74326095581055, y: 29.81219243068321 },\n  101: { x: 36.030113220214844, y: 29.49711339613971 },\n  102: { x: 28.959729003906247, y: 28.07925474877451 },\n  103: { x: 24.62108459472656, y: 26.503856584137566 },\n  104: { x: 21.567962646484375, y: 25.243537454044123 },\n  105: { x: 19.63967590332031, y: 24.14075784122243 },\n  106: { x: 18.99691467285156, y: 22.88043871112899 },\n  107: { x: 19.63967590332031, y: 21.62011958103554 },\n  108: { x: 21.728652954101562, y: 20.674882477405028 },\n  109: { x: 24.460392761230466, y: 20.044724408318018 },\n  110: { x: 28.316966247558597, y: 18.469326243681067 },\n  111: { x: 33.13768310546875, y: 17.681628657322307 },\n  112: { x: 37.95839996337891, y: 17.209010105507048 },\n  113: { x: 42.61842651367188, y: 16.578852036420038 },\n  114: { x: 47.27845306396485, y: 16.263773001876537 },\n  115: { x: 50.65295524597168, y: 16.263773001876537 },\n  116: { x: 53.8667667388916, y: 15.160993389054841 },\n  117: { x: 55.955744171142584, y: 12.955437155330884 },\n  118: { x: 56.91988754272461, y: 8.386785170611216 },\n  119: { x: 56.598506164550784, y: 3.818133185891547 },\n  120: { x: 54.34883804321289, y: -1.8532984116498152 },\n  121: { x: 50.97433586120606, y: -7.3671897439395675 },\n  122: { x: 46.7963809967041, y: -11.778302585377412 },\n  123: { x: 42.618426132202146, y: -14.771557901419845 },\n  124: { x: 39.88668670654297, y: -17.292193917667163 },\n  125: { x: 39.08323364257812, y: -19.3402110081093 },\n  126: { x: 37.73278274536133, y: -22.919728447409238 },\n  127: { x: 36.073744201660155, y: -26.76318479051777 },\n  128: { x: 35.26352996826172, y: -28.55819881663603 },\n  129: { x: 35.26352996826172, y: -28.55819881663603 },\n  130: { x: 35.26352996826172, y: -32 },\n};\n\nexport const animate_tentacles_grabbed_donut = ({\n  donut,\n  time,\n  x,\n  y,\n}: Tentacle) => {\n  if (donut === null) {\n    return;\n  }\n  const frame = Math.min(130, Math.floor(time * 15));\n  const frame_position = frame_positions[frame];\n  if (frame_position === undefined) {\n    return;\n  }\n  donut.x = frame_position.x;\n  donut.y = frame_position.y;\n};\n", "import { state_to_position } from \"./DonutState\";\nimport { DrawInput } from \"./Tentacle\";\n\nexport const draw_tentacle_donut = ({\n  context,\n  tentacle,\n  sprites,\n  tentacle_line,\n}: DrawInput) => {\n  const donut = tentacle.donut!;\n  /**\n   * same as draw_donut\n   */\n  const { x, y } = state_to_position(donut.state);\n  const donut_x = donut.x + tentacle.x;\n  const donut_y = donut.y + tentacle.y;\n  context.drawImage(sprites, x, y, 32, 32, donut_x, donut_y, 32, 32);\n  /**\n   * Draw the donut's eyes\n   */\n  const eye_frame = tentacle.state === \"grabbing_donut\" ? 0 : 1;\n  context.drawImage(\n    sprites,\n    512 - 64 + eye_frame * 32,\n    512 - 32,\n    32,\n    32,\n    donut_x + Math.random() * 2,\n    donut_y + Math.random() * 2,\n    32,\n    32\n  );\n  /**\n   * Draw the top part of the donut so it looks\n   * like the donut is opening it's eyes\n   */\n  const line = 14 * (1 - tentacle.donut_find_time / 0.2);\n  if (line > 0) {\n    context.drawImage(sprites, x, y, 32, line, donut_x, donut_y, 32, line);\n  }\n\n  if (tentacle.time * 15 < 121) {\n    /**\n     * Make the donut look like it's disappearing under\n     * the line, grabbed by the tentacle\n     */\n    return;\n  }\n  const { bottom } = tentacle_line.getBoundingClientRect();\n  context.clearRect(donut_x, bottom - 32, 32, 32);\n};\n", "import { Donut } from \"./Donut\";\nimport { RectPosition } from \"./RectPosition\";\nimport { find_next_donut } from \"./find_next_donut\";\nimport { animate_tentacles_grabbed_donut } from \"./animate_tentacles_grabbed_donut\";\nimport { draw_tentacle_donut } from \"./draw_tentacle_donut\";\nexport interface Tentacle {\n  x: number;\n  y: number;\n  left: true;\n\n  time: number;\n\n  wait_time: number;\n  wait_forward: boolean;\n  wait_count: number;\n\n  donut_find_time: number;\n\n  donut: Donut | null;\n  state:\n    | \"wait_for_scroll\"\n    | \"animating_1\"\n    | \"wait_for_donut\"\n    | \"wait_for_donut_timing\"\n    | \"animating_2\"\n    | \"grabbing_donut\"\n    | \"finished\"\n    | \"disappointed\";\n}\n\nexport interface UpdateInput {\n  tentacle: Tentacle;\n  main_position: RectPosition;\n  donuts: Donut[];\n  tentacle_line: HTMLElement;\n}\n\nexport const update_tentacle = (input: UpdateInput, timeIncrement: number) => {\n  const { tentacle, main_position, donuts, tentacle_line } = input;\n  if (tentacle.state === \"finished\") {\n    return;\n  }\n  const line = tentacle_line.getBoundingClientRect();\n  tentacle.x = main_position.left;\n  tentacle.y = line.bottom;\n  switch (tentacle.state) {\n    case \"wait_for_scroll\":\n      if (line.top > 400) {\n        return;\n      }\n      tentacle.state = \"animating_1\";\n    /**Fallthrough on purpose */\n    case \"animating_1\":\n      tentacle.time += timeIncrement;\n      if (tentacle.time < 4) {\n        return;\n      }\n      tentacle.state = \"wait_for_donut\";\n      tentacle.wait_time = tentacle.time;\n    /**Fallthrough on purpose */\n    case \"wait_for_donut\":\n      const next_donut = find_next_donut({\n        donut_holder: tentacle,\n        main_position,\n        donuts,\n        animation_length: 0.7,\n        time_threshold: 0.8,\n        pure_only: true,\n      });\n      if (next_donut) {\n        update_wait_time(tentacle, timeIncrement);\n        return;\n      }\n      tentacle.state = \"wait_for_donut_timing\";\n    /**Fallthrough on purpose */\n    case \"wait_for_donut_timing\":\n      tentacle.donut!.y += tentacle.donut!.vy * timeIncrement;\n      tentacle.donut_find_time += timeIncrement;\n      if (tentacle.donut!.y + tentacle.donut!.vy * 0.7 < 0) {\n        update_wait_time(tentacle, timeIncrement);\n        return;\n      }\n      tentacle.state = \"animating_2\";\n    /**Fallthrough on purpose */\n    case \"animating_2\":\n      tentacle.donut!.y += tentacle.donut!.vy * timeIncrement;\n      if (tentacle.time < 4.8) {\n        tentacle.time += timeIncrement;\n\n        return;\n      }\n      tentacle.state = \"grabbing_donut\";\n    /**Fallthrough on purpose */\n    case \"grabbing_donut\":\n      tentacle.time += timeIncrement;\n      animate_tentacles_grabbed_donut(tentacle);\n      if (tentacle.time < 10) {\n        return;\n      }\n      tentacle.state = \"finished\";\n      return;\n    case \"disappointed\":\n      tentacle.time += timeIncrement;\n      if (tentacle.time < 5.07) {\n        return;\n      }\n      tentacle.state = \"finished\";\n      return;\n  }\n};\n\nexport interface DrawInput {\n  context: CanvasRenderingContext2D;\n  tentacle_image: HTMLImageElement;\n  tentacle: Tentacle;\n  sprites: HTMLImageElement;\n  tentacle_line: HTMLElement;\n  disappointed_tentacle_image: HTMLImageElement;\n}\n\nexport const draw_tentacle = (input: DrawInput) => {\n  const { context, tentacle, sprites, tentacle_image, tentacle_line } = input;\n  if (tentacle.state === \"finished\") {\n    return;\n  }\n  if (tentacle.state === \"disappointed\") {\n    draw_disappointed_state(input);\n    return;\n  }\n  const frame = Math.min(\n    127,\n    Math.floor(get_tentacle_frame_time(tentacle) * 15)\n  );\n\n  const sx = (frame % 8) * 128;\n  const sy = Math.floor(frame / 8) * 64;\n\n  context.drawImage(\n    tentacle_image,\n    sx,\n    sy,\n    128,\n    64,\n    tentacle.x,\n    tentacle.y,\n    128,\n    64\n  );\n  if (tentacle.donut != null) {\n    draw_tentacle_donut(input);\n  }\n};\n\nconst draw_disappointed_state = (input: DrawInput) => {\n  const { context, tentacle, disappointed_tentacle_image, tentacle_image } =\n    input;\n  const frame = Math.min(\n    76,\n    Math.floor(get_tentacle_frame_time(tentacle) * 15)\n  );\n\n  const sx = (frame % 8) * 128;\n  const sy = Math.floor(frame / 8) * 64;\n\n  context.drawImage(\n    disappointed_tentacle_image,\n    sx,\n    sy,\n    128,\n    64,\n    tentacle.x,\n    tentacle.y,\n    128,\n    64\n  );\n};\n\nconst update_wait_time = (tentacle: Tentacle, timeIncrement: number) => {\n  tentacle.wait_time += (tentacle.wait_forward ? 1 : -1) * timeIncrement;\n  if (tentacle.wait_time < 3.8) {\n    tentacle.wait_forward = true;\n    return;\n  }\n  if (tentacle.wait_time <= 4.2) {\n    return;\n  }\n  tentacle.wait_forward = false;\n  tentacle.wait_count++;\n  if (tentacle.wait_count <= 3) {\n    return;\n  }\n  /**\n   * Waited too long, give up\n   */\n  tentacle.state = \"disappointed\";\n  tentacle.time = 0;\n  return;\n};\n\nconst get_tentacle_frame_time = (tentacle: Tentacle) => {\n  if (\n    tentacle.state == \"wait_for_donut\" ||\n    tentacle.state == \"wait_for_donut_timing\"\n  ) {\n    return tentacle.wait_time;\n  }\n  return tentacle.time;\n};\n", "export const load_image = (path: string) => {\n  const image = new Image();\n  image.src = path;\n  return image;\n};\n", "import { Donut } from \"./Donut\";\nimport { state_to_position } from \"./DonutState\";\nimport { find_next_donut } from \"./find_next_donut\";\nimport { RectPosition } from \"./RectPosition\";\n\nexport interface UFO {\n  x: number;\n  y: number;\n  time: number;\n  left: boolean;\n  clockwise: boolean;\n  donut: Donut | null;\n  abducting_time: number;\n  wait_time: number;\n  abducting_state: \"waiting\" | \"wait_for_abduct\" | \"abducting\";\n}\n\nexport interface UpdateInput {\n  ufos: UFO[];\n  main_position: RectPosition;\n  donuts: Donut[];\n}\n\nexport const update_ufos = (\n  { ufos, main_position, donuts }: UpdateInput,\n  timeDifference: number\n) => {\n  for (const ufo of ufos) {\n    ufo.time += timeDifference;\n    ufo.y = main_position.bottom - 100;\n    ufo.x = ufo.left ? main_position.left - 16 : main_position.right - 16;\n    switch (ufo.abducting_state) {\n      case \"waiting\":\n        const next_donut = find_next_donut({\n          donut_holder: ufo,\n          main_position,\n          donuts,\n          animation_length: 0.2,\n          time_threshold: 0.3,\n          pure_only: false,\n        });\n        if (next_donut) {\n          continue;\n        }\n        ufo.abducting_state = \"wait_for_abduct\";\n      /**\n       * Fallthrough on purpose\n       */\n      case \"wait_for_abduct\":\n        ufo.donut!.y += ufo.donut!.vy * timeDifference;\n        ufo.wait_time += timeDifference;\n        if (ufo.wait_time > 0.4) {\n          ufo.abducting_time += timeDifference;\n        }\n        if (ufo.wait_time < 1.1) {\n          continue;\n        }\n        ufo.abducting_state = \"abducting\";\n      /**\n       * Fallthrough on purpose\n       */\n      case \"abducting\":\n        ufo.abducting_time += timeDifference;\n        if (ufo.abducting_time < 1.94) {\n          continue;\n        }\n        ufo.abducting_state = \"waiting\";\n        ufo.wait_time = 0;\n        ufo.abducting_time = 0;\n        ufo.donut = null;\n        return;\n    }\n  }\n};\n\nexport interface DrawInput {\n  context: CanvasRenderingContext2D;\n  sprites: HTMLImageElement;\n  ufos: UFO[];\n}\n\nexport const draw_ufos = (input: DrawInput) => {\n  const { context, sprites, ufos } = input;\n  for (const ufo of ufos) {\n    if (ufo.donut) {\n      draw_ufo_donut(input, ufo);\n    }\n\n    {\n      const frame = Math.floor(ufo.abducting_time * 15) % 30;\n      const sx = 256 + 32 * (frame % 8);\n      const sy = 64 * 3 + 64 * Math.floor(frame / 8);\n      context.drawImage(\n        sprites,\n        sx,\n        sy,\n        32,\n        64,\n        ufo.x + 16,\n        ufo.y + 45,\n        32,\n        64\n      );\n    }\n\n    const raw_frame = Math.floor(ufo.time * 10) % 19;\n    const frame = ufo.clockwise ? raw_frame : 18 - raw_frame;\n    const sx = 64 * (frame % 4);\n    const sy = 128 + 64 * Math.floor(frame / 4);\n    context.drawImage(sprites, sx, sy, 64, 64, ufo.x, ufo.y, 64, 64);\n  }\n};\n\nconst donut_abduct_animation = {\n  22: { x: 4, y: -20, size: 24 },\n  23: { x: 8, y: -25.6, size: 16 },\n  24: { x: 10, y: -29.85, size: 12 },\n  25: { x: 10, y: -32.45, size: 12 },\n  26: { x: 12, y: -38.25, size: 8 },\n  27: { x: 12, y: -44.25, size: 8 },\n  28: { x: 14, y: -53.84, size: 4 },\n  29: { x: 14, y: -62.8, size: 4 },\n};\n\nconst get_abduct_animation_offsets = (ufo: UFO) => {\n  const default_offset = { x: 0, y: 0, size: 32 };\n  if (ufo.abducting_state !== \"abducting\") {\n    return default_offset;\n  }\n  const frame = Math.floor(ufo.abducting_time * 15) % 30;\n  return donut_abduct_animation[frame] ?? default_offset;\n};\n\nconst draw_ufo_donut = ({ context, sprites }: DrawInput, ufo: UFO) => {\n  const donut = ufo.donut!;\n  /**\n   * same as draw_donut\n   */\n  const { x, y } = state_to_position(donut.state);\n  const { x: x_o, y: y_o, size } = get_abduct_animation_offsets(ufo);\n\n  context.drawImage(\n    sprites,\n    x,\n    y,\n    32,\n    32,\n    donut.x + x_o + ufo.x,\n    donut.y + y_o + ufo.y,\n    size,\n    size\n  );\n};\n", "import { Donut } from \"./Donut\";\nimport { not_eaten } from \"./DonutState\";\nimport { draw_donut } from \"./draw_donut\";\nimport { makeAnimationCanvas } from \"./makeAnimationCanvas\";\nimport { MouseOrTouchInput } from \"./MouseOrTouchInput\";\nimport { setupMouseAndTouchListeners } from \"./setupMouseAndTouchListeners\";\nimport { Touches } from \"./Touches\";\nimport { handle_collisions } from \"./handle_collisions\";\nimport {\n  DonutMaker,\n  draw_donut_maker,\n  update_donut_makers,\n} from \"./DonutMaker\";\nimport {\n  draw_jelly_sprite,\n  JellySprite,\n  update_jelly_sprites,\n} from \"./JellySprite\";\nimport { draw_tentacle, Tentacle, update_tentacle } from \"./Tentacle\";\nimport { RectPosition } from \"./RectPosition\";\nimport { load_image } from \"./load_image\";\nimport { draw_ufos, UFO, update_ufos } from \"./UFO\";\n\nexport class Controller {\n  width: number;\n  height: number;\n  context: CanvasRenderingContext2D;\n\n  touches: Touches = new Map<number, MouseOrTouchInput>();\n  mouse: MouseOrTouchInput | null = null;\n\n  lastFrameTime: number | null = null;\n  timeSinceLastAnimationFrame: number = 0;\n\n  donut_makers: DonutMaker[] = [\n    {\n      x: 0,\n      y: -32,\n      left: true,\n      time: 0,\n      state: \"open\",\n      just_opened: false,\n    },\n    {\n      x: 0,\n      y: -32,\n      left: false,\n      time: -1,\n      state: \"open\",\n      just_opened: false,\n    },\n  ];\n\n  ufos: UFO[] = [\n    {\n      x: 0,\n      y: 0,\n      time: 0,\n      left: true,\n      clockwise: true,\n      donut: null,\n      abducting_time: 0,\n      abducting_state: \"waiting\",\n      wait_time: 0,\n    },\n    {\n      x: 0,\n      y: 0,\n      time: 0,\n      left: false,\n      clockwise: false,\n      donut: null,\n      abducting_time: 0,\n      abducting_state: \"waiting\",\n      wait_time: 0,\n    },\n    {\n      x: 0,\n      y: 0,\n      time: 0,\n      left: true,\n      clockwise: true,\n      donut: null,\n      abducting_time: 0,\n      abducting_state: \"waiting\",\n      wait_time: 0,\n    },\n    {\n      x: 0,\n      y: 0,\n      time: 0,\n      left: false,\n      clockwise: false,\n      donut: null,\n      abducting_time: 0,\n      abducting_state: \"waiting\",\n      wait_time: 0,\n    },\n  ];\n\n  jelly_sprites: JellySprite[] = [];\n\n  tentacle: Tentacle = {\n    x: 0,\n    y: 0,\n    left: true,\n    state: \"wait_for_scroll\",\n    time: 0,\n    wait_time: 0,\n    wait_forward: true,\n    wait_count: 0,\n\n    donut_find_time: 0,\n    donut: null,\n  };\n\n  main = document.getElementById(\"main\")!;\n\n  animation_toggle = document.getElementById(\n    \"animation-toggle\"\n  )! as HTMLInputElement;\n\n  animation_disabled = false;\n\n  main_position: RectPosition = {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  };\n\n  donuts: Donut[] = [];\n\n  sprites = load_image(\"/static/sprites.png\");\n\n  tentacle_image = load_image(\"/static/tentacle.png\");\n  disappointed_tentacle_image = load_image(\"/static/tentacle_disappointed.png\");\n\n  tentacle_line = document.getElementById(\"tentacle-line\")!;\n  original_transform: DOMMatrix;\n\n  constructor() {\n    const ratio = window.devicePixelRatio || 1;\n    const longest_side = Math.max(screen.width, screen.height);\n    this.width = longest_side;\n    this.height = longest_side;\n\n    const maybeContext = makeAnimationCanvas(this.width, this.height, ratio);\n    if (!maybeContext) {\n      throw new Error(\"Could not make Animation canvas\");\n    }\n    this.context = maybeContext.context;\n    this.context.imageSmoothingEnabled = false;\n    this.context.fillStyle = \"white\";\n\n    setupMouseAndTouchListeners({\n      touches: this.touches,\n      get_mouse: () => this.mouse,\n      set_mouse: (mouse: MouseOrTouchInput | null) => (this.mouse = mouse),\n    });\n    this.animation_toggle.addEventListener(\"change\", ({ target }) => {\n      this.animation_disabled = !(target as HTMLInputElement).checked;\n      if (this.animation_disabled) {\n        return;\n      }\n      this.lastFrameTime = null;\n      requestAnimationFrame(this.updateStateAndDraw);\n    });\n    this.original_transform = this.context.getTransform();\n\n    requestAnimationFrame(this.updateStateAndDraw);\n  }\n  updateStateAndDraw = (totalTimeElapsed: number) => {\n    if (this.animation_disabled) {\n      this.context.clearRect(0, 0, this.width, this.height);\n      return;\n    }\n\n    this.updateState(totalTimeElapsed);\n    this.draw();\n\n    requestAnimationFrame(this.updateStateAndDraw);\n  };\n\n  updateState = (totalTimeElapsed: number) => {\n    const timeDifference =\n      this.lastFrameTime == null ? 0 : totalTimeElapsed - this.lastFrameTime;\n    this.lastFrameTime = totalTimeElapsed;\n    const timeIncrement = timeDifference / 1000;\n\n    this.timeSinceLastAnimationFrame += timeIncrement;\n\n    const main_client_rect = this.main.getBoundingClientRect();\n    this.main_position = {\n      left: main_client_rect.left,\n      top: main_client_rect.top,\n      right: main_client_rect.right - 32,\n      bottom: main_client_rect.bottom - 32,\n    };\n\n    handle_collisions(this);\n\n    for (const donut of this.donuts) {\n      donut.y += timeIncrement * donut.vy;\n    }\n    update_donut_makers(this.donut_makers, timeIncrement, this.spawn_donut);\n    update_jelly_sprites(this.jelly_sprites, timeIncrement);\n    update_tentacle(this, timeIncrement);\n    update_ufos(this, timeIncrement);\n    /**\n     * Touch and requestAnimationFrame may not be\n     * updated in sync. Make sure the difference is only\n     * applied once, by deleting it now.\n     */\n    for (const [_, touch] of this.touches) {\n      touch.difference = null;\n    }\n    if (this.mouse) {\n      this.mouse.difference = null;\n    }\n  };\n\n  spawn_donut = (maker: DonutMaker) => {\n    const donut: Donut = {\n      x: maker.x,\n      y: maker.y + 32,\n      vy: 100,\n      state: {\n        top: not_eaten,\n        right: not_eaten,\n        left: not_eaten,\n        bottom: not_eaten,\n      },\n      left: maker.left,\n    };\n    this.donuts.push(donut);\n  };\n\n  draw_side = (left: boolean) => {\n    for (const jelly_sprite of this.jelly_sprites) {\n      if (jelly_sprite.left != left) {\n        continue;\n      }\n      draw_jelly_sprite(this.context, this.sprites, jelly_sprite);\n    }\n\n    for (const maker of this.donut_makers) {\n      if (maker.left != left) {\n        continue;\n      }\n      draw_donut_maker(this.context, this.sprites, maker);\n    }\n\n    for (const donut of this.donuts) {\n      if (donut.left != left) {\n        continue;\n      }\n      draw_donut(this.context, this.sprites, donut);\n    }\n  };\n \n\n  draw = () => {\n    this.context.setTransform(this.original_transform);\n    this.context.clearRect(0, 0, this.width, this.height);\n\n    //check zoom level\n    const zoom = window.visualViewport?.scale || 1;\n    if (zoom != 1) {\n      return;\n    }\n\n    const left_position = {\n      x: this.main_position.left,\n      y: this.main_position.top,\n    };\n    const right_position = {\n      x: this.main_position.right,\n      y: this.main_position.top,\n    };\n\n    this.context.translate(left_position.x, left_position.y);\n    this.draw_side(true);\n    this.context.translate(\n      -left_position.x + right_position.x,\n      -left_position.y + right_position.y\n    );\n    this.draw_side(false);\n    this.context.translate(-right_position.x, -right_position.y);\n    draw_tentacle(this);\n    draw_ufos(this);\n  };\n}\n", "import { Controller } from \"./Controller\";\n\nlet controller: Controller | null = null;\n\nwindow.onload = () => {\n  if (matchMedia(\"(prefers-reduced-motion)\").matches) {\n    return;\n  }\n  controller = new Controller();\n};\n"],
  "mappings": "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",
  "names": ["canvas", "context", "frame", "sx", "sy", "index", "donut", "y_in_absolute_coords", "frame", "sx", "sy"]
}
